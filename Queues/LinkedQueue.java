/** * A class that implements the ADT queue by using a chain of nodes that has both * head and tail references. *  * @author Frank M. Carrano * @version 2.0 */public class LinkedQueue<T> implements QueueInterface<T>, java.io.Serializable {	private Node firstNode; // references node at front of queue	private Node lastNode; // references node at back of queue	public LinkedQueue() {		firstNode = null;		lastNode = null;	} 	public void enqueue(T newEntry) {		Node newNode = new Node(newEntry, null);		if (isEmpty())			firstNode = newNode;		else			lastNode.next = newNode;		lastNode = newNode;	} 	public T getFront() {		T front = null;		if (!isEmpty())			front = firstNode.data;		return front;	} 	public T dequeue() {		T front = null;		if (!isEmpty()) {			front = firstNode.data;			firstNode = firstNode.next;			if (firstNode == null)				lastNode = null;		} 		return front;	} 	public boolean isEmpty() {		return (firstNode == null) && (lastNode == null);	} 	public void clear() {		firstNode = null;		lastNode = null;	} 		// Q8	public void splice(LinkedQueue<T> otherQueue){				Node newNode;		while(!otherQueue.isEmpty()){			T temp = otherQueue.dequeue();			newNode = new Node(temp,null);						if(isEmpty())				firstNode = newNode;			else{				lastNode.next = newNode;				lastNode = newNode;			}		}					}	private class Node implements java.io.Serializable {		private T data; 		private Node next; 		private Node(T dataPortion) {			data = dataPortion;			next = null;		} 		private Node(T dataPortion, Node linkPortion) {			data = dataPortion;			next = linkPortion;		}	} } 